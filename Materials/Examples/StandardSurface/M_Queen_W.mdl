mdl 1.8;

import ::df::*;
import ::base::*;
import ::math::*;
import ::state::*;
import ::anno::*;
import ::tex::*;
using ::materialx::core import *;
using ::materialx::sampling import *;
using ::materialx::stdlib_1_8 import *;
using ::materialx::pbrlib_1_8 import *;

struct NG_separate3_color3__result
{
    float mxp_outr;
    float mxp_outg;
    float mxp_outb;
};

NG_separate3_color3__result NG_separate3_color3
(
    color in1 = color(0.000000, 0.000000, 0.000000)
)
{
    float N_extract_0_out = materialx::stdlib_1_8::mx_extract_color3(in1, 0);
    float N_extract_1_out = materialx::stdlib_1_8::mx_extract_color3(in1, 1);
    float N_extract_2_out = materialx::stdlib_1_8::mx_extract_color3(in1, 2);
    NG_separate3_color3__result result__;
    result__.mxp_outr = N_extract_0_out;
    result__.mxp_outg = N_extract_1_out;
    result__.mxp_outb = N_extract_2_out;
    return result__;
}

color NG_srgb_texture_to_lin_rec709_color3
(
    color in1 = color(0.000000, 0.000000, 0.000000)
)
{
    color bias_out = in1 + 0.055000;
    color linSeg_out = in1 / 12.920000;
    NG_separate3_color3__result colorSeparate_result = NG_separate3_color3(in1);
    color max_out = math::max(bias_out, 0.000000);
    float isAboveR_out = materialx::stdlib_1_8::mx_ifgreater_float(colorSeparate_result.mxp_outr, 0.040450, 1.000000, 0.000000);
    float isAboveG_out = materialx::stdlib_1_8::mx_ifgreater_float(colorSeparate_result.mxp_outg, 0.040450, 1.000000, 0.000000);
    float isAboveB_out = materialx::stdlib_1_8::mx_ifgreater_float(colorSeparate_result.mxp_outb, 0.040450, 1.000000, 0.000000);
    color scale_out = max_out / 1.055000;
    color isAbove_out = color( isAboveR_out,isAboveG_out,isAboveB_out );
    color powSeg_out = math::pow(scale_out, 2.400000);
    color mix_out = math::lerp(linSeg_out, powSeg_out, isAbove_out);
    return mix_out;
}

color NG_convert_float_color3
(
    float in1 = 0.000000
)
{
    color combine_out = color( in1,in1,in1 );
    return combine_out;
}

material NG_standard_surface_surfaceshader_100
(
    float base = 0.800000,
    color base_color = color(1.000000, 1.000000, 1.000000),
    float diffuse_roughness = 0.000000,
    float metalness = 0.000000,
    float specular = 1.000000,
    color specular_color = color(1.000000, 1.000000, 1.000000),
    float specular_roughness = 0.200000,
    uniform float specular_IOR = 1.500000,
    float specular_anisotropy = 0.000000,
    float specular_rotation = 0.000000,
    float transmission = 0.000000,
    color transmission_color = color(1.000000, 1.000000, 1.000000),
    float transmission_depth = 0.000000,
    color transmission_scatter = color(0.000000, 0.000000, 0.000000),
    float transmission_scatter_anisotropy = 0.000000,
    float transmission_dispersion = 0.000000,
    float transmission_extra_roughness = 0.000000,
    float subsurface = 0.000000,
    color subsurface_color = color(1.000000, 1.000000, 1.000000),
    color subsurface_radius = color(1.000000, 1.000000, 1.000000),
    float subsurface_scale = 1.000000,
    float subsurface_anisotropy = 0.000000,
    float sheen = 0.000000,
    color sheen_color = color(1.000000, 1.000000, 1.000000),
    float sheen_roughness = 0.300000,
    float coat = 0.000000,
    color coat_color = color(1.000000, 1.000000, 1.000000),
    float coat_roughness = 0.100000,
    float coat_anisotropy = 0.000000,
    float coat_rotation = 0.000000,
    uniform float coat_IOR = 1.500000,
    float3 coat_normal = state::transform_normal(state::coordinate_internal, state::coordinate_world, state::normal()),
    float coat_affect_color = 0.000000,
    float coat_affect_roughness = 0.000000,
    float thin_film_thickness = 0.000000,
    float thin_film_IOR = 1.500000,
    float emission = 0.000000,
    color emission_color = color(1.000000, 1.000000, 1.000000),
    color opacity = color(1.000000, 1.000000, 1.000000),
    bool thin_walled = false,
    float3 normal = state::transform_normal(state::coordinate_internal, state::coordinate_world, state::normal()),
    float3 tangent = state::transform_vector(state::coordinate_internal, state::coordinate_world, state::texture_tangent_u(0))
)
 = let
{
    float2 coat_roughness_vector_out = materialx::pbrlib_1_8::mx_roughness_anisotropy(mxp_roughness:coat_roughness, mxp_anisotropy:coat_anisotropy);
    float coat_tangent_rotate_degree_out = coat_rotation * 360.000000;
    color metal_reflectivity_out = base_color * base;
    color metal_edgecolor_out = specular_color * specular;
    float coat_affect_roughness_multiply1_out = coat_affect_roughness * coat;
    float tangent_rotate_degree_out = specular_rotation * 360.000000;
    float transmission_roughness_add_out = specular_roughness + transmission_extra_roughness;
    color subsurface_color_nonnegative_out = math::max(subsurface_color, 0.000000);
    float coat_clamped_out = math::clamp(coat, 0.000000, 1.000000);
    color subsurface_radius_scaled_out = subsurface_radius * subsurface_scale;
    float subsurface_selector_out = float(thin_walled);
    color base_color_nonnegative_out = math::max(base_color, 0.000000);
    color coat_attenuation_out = math::lerp(color(1.000000, 1.000000, 1.000000), coat_color, coat);
    float one_minus_coat_ior_out = 1.000000 - coat_IOR;
    float one_plus_coat_ior_out = 1.000000 + coat_IOR;
    color emission_weight_out = emission_color * emission;
    color opacity_luminance_out = materialx::stdlib_1_8::mx_luminance_color3(opacity);
    float3 coat_tangent_rotate_out = materialx::stdlib_1_8::mx_rotate3d_vector3(mxp_in:tangent, mxp_amount:coat_tangent_rotate_degree_out, mxp_axis:coat_normal);
    materialx::pbrlib_1_8::mx_artistic_ior__result artistic_ior_result = materialx::pbrlib_1_8::mx_artistic_ior(mxp_reflectivity:metal_reflectivity_out, mxp_edge_color:metal_edgecolor_out);
    float coat_affect_roughness_multiply2_out = coat_affect_roughness_multiply1_out * coat_roughness;
    float3 tangent_rotate_out = materialx::stdlib_1_8::mx_rotate3d_vector3(mxp_in:tangent, mxp_amount:tangent_rotate_degree_out, mxp_axis:normal);
    float transmission_roughness_clamped_out = math::clamp(transmission_roughness_add_out, 0.000000, 1.000000);
    float coat_gamma_multiply_out = coat_clamped_out * coat_affect_color;
    float coat_ior_to_F0_sqrt_out = one_minus_coat_ior_out / one_plus_coat_ior_out;
    float opacity_luminance_float_out = materialx::stdlib_1_8::mx_extract_color3(opacity_luminance_out, 0);
    float3 coat_tangent_rotate_normalize_out = math::normalize(coat_tangent_rotate_out);
    float coat_affected_roughness_out = math::lerp(specular_roughness, 1.000000, coat_affect_roughness_multiply2_out);
    float3 tangent_rotate_normalize_out = math::normalize(tangent_rotate_out);
    float coat_affected_transmission_roughness_out = math::lerp(transmission_roughness_clamped_out, 1.000000, coat_affect_roughness_multiply2_out);
    float coat_gamma_out = coat_gamma_multiply_out + 1.000000;
    float coat_ior_to_F0_out = coat_ior_to_F0_sqrt_out * coat_ior_to_F0_sqrt_out;
    float3 coat_tangent_out = materialx::stdlib_1_8::mx_ifgreater_vector3(coat_anisotropy, 0.000000, coat_tangent_rotate_normalize_out, tangent);
    float2 main_roughness_out = materialx::pbrlib_1_8::mx_roughness_anisotropy(mxp_roughness:coat_affected_roughness_out, mxp_anisotropy:specular_anisotropy);
    float3 main_tangent_out = materialx::stdlib_1_8::mx_ifgreater_vector3(specular_anisotropy, 0.000000, tangent_rotate_normalize_out, tangent);
    float2 transmission_roughness_out = materialx::pbrlib_1_8::mx_roughness_anisotropy(mxp_roughness:coat_affected_transmission_roughness_out, mxp_anisotropy:specular_anisotropy);
    color coat_affected_subsurface_color_out = math::pow(subsurface_color_nonnegative_out, coat_gamma_out);
    color coat_affected_diffuse_color_out = math::pow(base_color_nonnegative_out, coat_gamma_out);
    float one_minus_coat_ior_to_F0_out = 1.000000 - coat_ior_to_F0_out;
    color emission_color0_out = NG_convert_float_color3(one_minus_coat_ior_to_F0_out);
    material metal_bsdf_out = materialx::pbrlib_1_8::mx_conductor_bsdf(mxp_weight:1.000000, mxp_ior:artistic_ior_result.mxp_ior, mxp_extinction:artistic_ior_result.mxp_extinction, mxp_roughness:main_roughness_out, mxp_thinfilm_thickness:thin_film_thickness, mxp_thinfilm_ior:thin_film_IOR, mxp_normal:normal, mxp_tangent:main_tangent_out, mxp_distribution:mx_distribution_type_ggx);
    material transmission_bsdf_out = materialx::pbrlib_1_8::mx_dielectric_bsdf(mxp_weight:1.000000, mxp_tint:transmission_color, mxp_ior:specular_IOR, mxp_roughness:transmission_roughness_out, mxp_thinfilm_thickness:0.000000, mxp_thinfilm_ior:1.500000, mxp_normal:normal, mxp_tangent:main_tangent_out, mxp_distribution:mx_distribution_type_ggx, mxp_scatter_mode:mx_scatter_mode_T, mxp_base:material());
    material translucent_bsdf_out = materialx::pbrlib_1_8::mx_translucent_bsdf(mxp_weight:1.000000, mxp_color:coat_affected_subsurface_color_out, mxp_normal:normal);
    material subsurface_bsdf_out = materialx::pbrlib_1_8::mx_subsurface_bsdf(mxp_weight:1.000000, mxp_color:coat_affected_subsurface_color_out, mxp_radius:subsurface_radius_scaled_out, mxp_anisotropy:subsurface_anisotropy, mxp_normal:normal);
    material selected_subsurface_bsdf_out = materialx::pbrlib_1_8::mx_mix_bsdf(mxp_fg:translucent_bsdf_out, mxp_bg:subsurface_bsdf_out, mxp_mix:subsurface_selector_out);
    material diffuse_bsdf_out = materialx::pbrlib_1_8::mx_oren_nayar_diffuse_bsdf(mxp_weight:base, mxp_color:coat_affected_diffuse_color_out, mxp_roughness:diffuse_roughness, mxp_normal:normal);
    material subsurface_mix_out = materialx::pbrlib_1_8::mx_mix_bsdf(mxp_fg:selected_subsurface_bsdf_out, mxp_bg:diffuse_bsdf_out, mxp_mix:subsurface);
    material sheen_layer_out = materialx::pbrlib_1_8::mx_sheen_bsdf(mxp_weight:sheen, mxp_color:sheen_color, mxp_roughness:sheen_roughness, mxp_normal:normal, mxp_base:subsurface_mix_out);
    material transmission_mix_out = materialx::pbrlib_1_8::mx_mix_bsdf(mxp_fg:transmission_bsdf_out, mxp_bg:sheen_layer_out, mxp_mix:transmission);
    material specular_layer_out = materialx::pbrlib_1_8::mx_dielectric_bsdf(mxp_weight:specular, mxp_tint:specular_color, mxp_ior:specular_IOR, mxp_roughness:main_roughness_out, mxp_thinfilm_thickness:thin_film_thickness, mxp_thinfilm_ior:thin_film_IOR, mxp_normal:normal, mxp_tangent:main_tangent_out, mxp_distribution:mx_distribution_type_ggx, mxp_scatter_mode:mx_scatter_mode_R, mxp_base:transmission_mix_out);
    material metalness_mix_out = materialx::pbrlib_1_8::mx_mix_bsdf(mxp_fg:metal_bsdf_out, mxp_bg:specular_layer_out, mxp_mix:metalness);
    material thin_film_layer_attenuated_out = materialx::pbrlib_1_8::mx_multiply_bsdf_color3(mxp_in1:metalness_mix_out, mxp_in2:coat_attenuation_out);
    material coat_layer_out = materialx::pbrlib_1_8::mx_dielectric_bsdf(mxp_weight:coat, mxp_tint:color(1.000000, 1.000000, 1.000000), mxp_ior:coat_IOR, mxp_roughness:coat_roughness_vector_out, mxp_thinfilm_thickness:0.000000, mxp_thinfilm_ior:1.500000, mxp_normal:coat_normal, mxp_tangent:coat_tangent_out, mxp_distribution:mx_distribution_type_ggx, mxp_scatter_mode:mx_scatter_mode_R, mxp_base:thin_film_layer_attenuated_out);
    material emission_edf_out = materialx::pbrlib_1_8::mx_uniform_edf(mxp_color:emission_weight_out);
    material coat_tinted_emission_edf_out = materialx::pbrlib_1_8::mx_multiply_edf_color3(mxp_in1:emission_edf_out, mxp_in2:coat_color);
    material coat_emission_edf_out = materialx::pbrlib_1_8::mx_generalized_schlick_edf(mxp_color0:emission_color0_out, mxp_color90:color(0.000000, 0.000000, 0.000000), mxp_exponent:5.000000, mxp_base:coat_tinted_emission_edf_out);
    material blended_coat_emission_edf_out = materialx::pbrlib_1_8::mx_mix_edf(mxp_fg:coat_emission_edf_out, mxp_bg:emission_edf_out, mxp_mix:coat);
    material shader_constructor_out = materialx::pbrlib_1_8::mx_surface(coat_layer_out, blended_coat_emission_edf_out, opacity_luminance_float_out, false, specular_IOR);
}
in material(shader_constructor_out);

export material M_Queen_W
(
    material backsurfaceshader = material()
    [[
    	materialx::core::origin("")
    ]],
    material displacementshader = material()
    [[
    	materialx::core::origin("")
    ]],
    uniform mx_coordinatespace_type geomprop_Nworld_space = mx_coordinatespace_type_world
    [[
    	materialx::core::origin("Nworld")
    ]],
    uniform mx_coordinatespace_type geomprop_Tworld_space = mx_coordinatespace_type_world
    [[
    	materialx::core::origin("Tworld")
    ]],
    uniform int geomprop_Tworld_index = 0
    [[
    	materialx::core::origin("Tworld")
    ]],
    uniform int geomprop_UV0_index = 0
    [[
    	materialx::core::origin("UV0")
    ]],
    uniform mx_coordinatespace_type geomprop_Bworld_space = mx_coordinatespace_type_world
    [[
    	materialx::core::origin("Bworld")
    ]],
    uniform int geomprop_Bworld_index = 0
    [[
    	materialx::core::origin("Bworld")
    ]],
    uniform texture_2d diffuse1_file = texture_2d("/chess_set/queen_white_base_color.jpg", tex::gamma_linear)
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/file")
    ]],
    uniform string diffuse1_layer = ""
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/layer")
    ]],
    color diffuse1_default = color(0.000000, 0.000000, 0.000000)
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/default")
    ]],
    uniform mx_addressmode_type diffuse1_uaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/uaddressmode")
    ]],
    uniform mx_addressmode_type diffuse1_vaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/vaddressmode")
    ]],
    uniform mx_filterlookup_type diffuse1_filtertype = mx_filterlookup_type_linear
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/filtertype")
    ]],
    uniform string diffuse1_framerange = ""
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/framerange")
    ]],
    uniform int diffuse1_frameoffset = 0
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/frameoffset")
    ]],
    uniform mx_addressmode_type diffuse1_frameendaction = mx_addressmode_type_constant
    [[
    	materialx::core::origin("NG_QueenWhite/diffuse1/frameendaction")
    ]],
    uniform texture_2d metallic1_file = texture_2d("/chess_set/queen_shared_metallic.jpg", tex::gamma_linear)
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/file")
    ]],
    uniform string metallic1_layer = ""
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/layer")
    ]],
    float metallic1_default = 0.000000
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/default")
    ]],
    uniform mx_addressmode_type metallic1_uaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/uaddressmode")
    ]],
    uniform mx_addressmode_type metallic1_vaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/vaddressmode")
    ]],
    uniform mx_filterlookup_type metallic1_filtertype = mx_filterlookup_type_linear
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/filtertype")
    ]],
    uniform string metallic1_framerange = ""
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/framerange")
    ]],
    uniform int metallic1_frameoffset = 0
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/frameoffset")
    ]],
    uniform mx_addressmode_type metallic1_frameendaction = mx_addressmode_type_constant
    [[
    	materialx::core::origin("NG_QueenWhite/metallic1/frameendaction")
    ]],
    uniform texture_2d roughness1_file = texture_2d("/chess_set/queen_white_roughness.jpg", tex::gamma_linear)
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/file")
    ]],
    uniform string roughness1_layer = ""
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/layer")
    ]],
    float roughness1_default = 0.000000
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/default")
    ]],
    uniform mx_addressmode_type roughness1_uaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/uaddressmode")
    ]],
    uniform mx_addressmode_type roughness1_vaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/vaddressmode")
    ]],
    uniform mx_filterlookup_type roughness1_filtertype = mx_filterlookup_type_linear
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/filtertype")
    ]],
    uniform string roughness1_framerange = ""
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/framerange")
    ]],
    uniform int roughness1_frameoffset = 0
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/frameoffset")
    ]],
    uniform mx_addressmode_type roughness1_frameendaction = mx_addressmode_type_constant
    [[
    	materialx::core::origin("NG_QueenWhite/roughness1/frameendaction")
    ]],
    uniform texture_2d sss1_file = texture_2d("/chess_set/queen_shared_scattering.jpg", tex::gamma_linear)
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/file")
    ]],
    uniform string sss1_layer = ""
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/layer")
    ]],
    float sss1_default = 0.000000
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/default")
    ]],
    uniform mx_addressmode_type sss1_uaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/uaddressmode")
    ]],
    uniform mx_addressmode_type sss1_vaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/vaddressmode")
    ]],
    uniform mx_filterlookup_type sss1_filtertype = mx_filterlookup_type_linear
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/filtertype")
    ]],
    uniform string sss1_framerange = ""
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/framerange")
    ]],
    uniform int sss1_frameoffset = 0
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/frameoffset")
    ]],
    uniform mx_addressmode_type sss1_frameendaction = mx_addressmode_type_constant
    [[
    	materialx::core::origin("NG_QueenWhite/sss1/frameendaction")
    ]],
    uniform texture_2d normal1_file = texture_2d("/chess_set/queen_white_normal.jpg", tex::gamma_linear)
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/file")
    ]],
    uniform string normal1_layer = ""
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/layer")
    ]],
    float3 normal1_default = float3(0.000000, 0.000000, 0.000000)
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/default")
    ]],
    uniform mx_addressmode_type normal1_uaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/uaddressmode")
    ]],
    uniform mx_addressmode_type normal1_vaddressmode = mx_addressmode_type_periodic
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/vaddressmode")
    ]],
    uniform mx_filterlookup_type normal1_filtertype = mx_filterlookup_type_linear
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/filtertype")
    ]],
    uniform string normal1_framerange = ""
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/framerange")
    ]],
    uniform int normal1_frameoffset = 0
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/frameoffset")
    ]],
    uniform mx_addressmode_type normal1_frameendaction = mx_addressmode_type_constant
    [[
    	materialx::core::origin("NG_QueenWhite/normal1/frameendaction")
    ]],
    float mtlxnormalmap3_scale = 1.000000
    [[
    	materialx::core::origin("NG_QueenWhite/mtlxnormalmap3/scale")
    ]],
    float Queen_W_base = 1.000000
    [[
    	materialx::core::origin("Queen_W/base")
    ]],
    float Queen_W_diffuse_roughness = 0.000000
    [[
    	materialx::core::origin("Queen_W/diffuse_roughness")
    ]],
    float Queen_W_specular = 1.000000
    [[
    	materialx::core::origin("Queen_W/specular")
    ]],
    color Queen_W_specular_color = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/specular_color")
    ]],
    uniform float Queen_W_specular_IOR = 1.500000
    [[
    	materialx::core::origin("Queen_W/specular_IOR")
    ]],
    float Queen_W_specular_anisotropy = 0.000000
    [[
    	materialx::core::origin("Queen_W/specular_anisotropy")
    ]],
    float Queen_W_specular_rotation = 0.000000
    [[
    	materialx::core::origin("Queen_W/specular_rotation")
    ]],
    float Queen_W_transmission = 0.000000
    [[
    	materialx::core::origin("Queen_W/transmission")
    ]],
    color Queen_W_transmission_color = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/transmission_color")
    ]],
    float Queen_W_transmission_depth = 0.000000
    [[
    	materialx::core::origin("Queen_W/transmission_depth")
    ]],
    color Queen_W_transmission_scatter = color(0.000000, 0.000000, 0.000000)
    [[
    	materialx::core::origin("Queen_W/transmission_scatter")
    ]],
    float Queen_W_transmission_scatter_anisotropy = 0.000000
    [[
    	materialx::core::origin("Queen_W/transmission_scatter_anisotropy")
    ]],
    float Queen_W_transmission_dispersion = 0.000000
    [[
    	materialx::core::origin("Queen_W/transmission_dispersion")
    ]],
    float Queen_W_transmission_extra_roughness = 0.000000
    [[
    	materialx::core::origin("Queen_W/transmission_extra_roughness")
    ]],
    float Queen_W_subsurface_scale = 0.001000
    [[
    	materialx::core::origin("Queen_W/subsurface_scale")
    ]],
    float Queen_W_subsurface_anisotropy = 0.000000
    [[
    	materialx::core::origin("Queen_W/subsurface_anisotropy")
    ]],
    float Queen_W_sheen = 0.000000
    [[
    	materialx::core::origin("Queen_W/sheen")
    ]],
    color Queen_W_sheen_color = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/sheen_color")
    ]],
    float Queen_W_sheen_roughness = 0.300000
    [[
    	materialx::core::origin("Queen_W/sheen_roughness")
    ]],
    float Queen_W_coat = 0.000000
    [[
    	materialx::core::origin("Queen_W/coat")
    ]],
    color Queen_W_coat_color = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/coat_color")
    ]],
    float Queen_W_coat_roughness = 0.100000
    [[
    	materialx::core::origin("Queen_W/coat_roughness")
    ]],
    float Queen_W_coat_anisotropy = 0.000000
    [[
    	materialx::core::origin("Queen_W/coat_anisotropy")
    ]],
    float Queen_W_coat_rotation = 0.000000
    [[
    	materialx::core::origin("Queen_W/coat_rotation")
    ]],
    uniform float Queen_W_coat_IOR = 1.500000
    [[
    	materialx::core::origin("Queen_W/coat_IOR")
    ]],
    float Queen_W_coat_affect_color = 0.000000
    [[
    	materialx::core::origin("Queen_W/coat_affect_color")
    ]],
    float Queen_W_coat_affect_roughness = 0.000000
    [[
    	materialx::core::origin("Queen_W/coat_affect_roughness")
    ]],
    float Queen_W_thin_film_thickness = 0.000000
    [[
    	materialx::core::origin("Queen_W/thin_film_thickness")
    ]],
    float Queen_W_thin_film_IOR = 1.500000
    [[
    	materialx::core::origin("Queen_W/thin_film_IOR")
    ]],
    float Queen_W_emission = 0.000000
    [[
    	materialx::core::origin("Queen_W/emission")
    ]],
    color Queen_W_emission_color = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/emission_color")
    ]],
    color Queen_W_opacity = color(1.000000, 1.000000, 1.000000)
    [[
    	materialx::core::origin("Queen_W/opacity")
    ]],
    bool Queen_W_thin_walled = false
    [[
    	materialx::core::origin("Queen_W/thin_walled")
    ]]
)
= let
{
    float3 geomprop_Nworld_out1 = materialx::stdlib_1_8::mx_normal_vector3(mxp_space:geomprop_Nworld_space);
    float3 geomprop_Tworld_out1 = materialx::stdlib_1_8::mx_tangent_vector3(mxp_space:geomprop_Tworld_space, mxp_index:geomprop_Tworld_index);
    float2 geomprop_UV0_out1 = materialx::stdlib_1_8::mx_texcoord_vector2(mxp_index:geomprop_UV0_index);
    float3 geomprop_Bworld_out1 = materialx::stdlib_1_8::mx_bitangent_vector3(mxp_space:geomprop_Bworld_space, mxp_index:geomprop_Bworld_index);
    color diffuse1_out = materialx::stdlib_1_8::mx_image_color3(diffuse1_file, diffuse1_layer, diffuse1_default, geomprop_UV0_out1, diffuse1_uaddressmode, diffuse1_vaddressmode, diffuse1_filtertype, diffuse1_framerange, diffuse1_frameoffset, diffuse1_frameendaction, mxp_flip_v:false);
    float metallic1_out = materialx::stdlib_1_8::mx_image_float(metallic1_file, metallic1_layer, metallic1_default, geomprop_UV0_out1, metallic1_uaddressmode, metallic1_vaddressmode, metallic1_filtertype, metallic1_framerange, metallic1_frameoffset, metallic1_frameendaction, mxp_flip_v:false);
    float roughness1_out = materialx::stdlib_1_8::mx_image_float(roughness1_file, roughness1_layer, roughness1_default, geomprop_UV0_out1, roughness1_uaddressmode, roughness1_vaddressmode, roughness1_filtertype, roughness1_framerange, roughness1_frameoffset, roughness1_frameendaction, mxp_flip_v:false);
    float sss1_out = materialx::stdlib_1_8::mx_image_float(sss1_file, sss1_layer, sss1_default, geomprop_UV0_out1, sss1_uaddressmode, sss1_vaddressmode, sss1_filtertype, sss1_framerange, sss1_frameoffset, sss1_frameendaction, mxp_flip_v:false);
    float3 normal1_out = materialx::stdlib_1_8::mx_image_vector3(normal1_file, normal1_layer, normal1_default, geomprop_UV0_out1, normal1_uaddressmode, normal1_vaddressmode, normal1_filtertype, normal1_framerange, normal1_frameoffset, normal1_frameendaction, mxp_flip_v:false);
    color diffuse1_out_cm_out = NG_srgb_texture_to_lin_rec709_color3(diffuse1_out);
    float3 mtlxnormalmap3_out = materialx::stdlib_1_8::mx_normalmap_float(mxp_in:normal1_out, mxp_scale:mtlxnormalmap3_scale, mxp_normal:geomprop_Nworld_out1, mxp_tangent:geomprop_Tworld_out1, mxp_bitangent:geomprop_Bworld_out1);
    material Queen_W_out = NG_standard_surface_surfaceshader_100(Queen_W_base, diffuse1_out_cm_out, Queen_W_diffuse_roughness, metallic1_out, Queen_W_specular, Queen_W_specular_color, roughness1_out, Queen_W_specular_IOR, Queen_W_specular_anisotropy, Queen_W_specular_rotation, Queen_W_transmission, Queen_W_transmission_color, Queen_W_transmission_depth, Queen_W_transmission_scatter, Queen_W_transmission_scatter_anisotropy, Queen_W_transmission_dispersion, Queen_W_transmission_extra_roughness, sss1_out, diffuse1_out_cm_out, diffuse1_out_cm_out, Queen_W_subsurface_scale, Queen_W_subsurface_anisotropy, Queen_W_sheen, Queen_W_sheen_color, Queen_W_sheen_roughness, Queen_W_coat, Queen_W_coat_color, Queen_W_coat_roughness, Queen_W_coat_anisotropy, Queen_W_coat_rotation, Queen_W_coat_IOR, geomprop_Nworld_out1, Queen_W_coat_affect_color, Queen_W_coat_affect_roughness, Queen_W_thin_film_thickness, Queen_W_thin_film_IOR, Queen_W_emission, Queen_W_emission_color, Queen_W_opacity, Queen_W_thin_walled, mtlxnormalmap3_out, geomprop_Tworld_out1);
    material M_Queen_W_out = materialx::stdlib_1_8::mx_surfacematerial(mxp_surfaceshader: Queen_W_out, mxp_backsurfaceshader: backsurfaceshader, mxp_displacementshader: displacementshader);
    material finalOutput__ = M_Queen_W_out;
}
in material(finalOutput__);
